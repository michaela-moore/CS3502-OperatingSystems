using System.Diagnostics;
using System.IO.Pipes;

namespace InterprocessCommunications {
    public class ReadFilesProcess(String path) {

        //Initialize object with given file path
        public String file = path;

        //Passes data to the process to retrieve files in the folder
        public String GetFiles() {

            //Initialize a new process to read files in folder
            using Process folderReadProcess = new();
            String output = "";

            try{
                folderReadProcess.StartInfo.FileName = "ls"; //command for reading contents of a folder
                folderReadProcess.StartInfo.Arguments = this.file; //folder to be read
                folderReadProcess.StartInfo.UseShellExecute = false; //created directly from the executable file, since we want to read the output
                folderReadProcess.StartInfo.RedirectStandardOutput = true; //capture the output of the process
                folderReadProcess.Start();

                //Read the output of the process
                Console.WriteLine("...Reading files from the folder...");
                output = folderReadProcess.StandardOutput.ReadToEnd();
                folderReadProcess.WaitForExit();
            }
            catch (Exception e) {
                Console.WriteLine($"Error: {e.Message}");
                return "Error: " + e.Message;
            }
            finally {
                Console.WriteLine($"Files read successfully.");        
            }
            return output;
        }

        public static void Main(string[] args) {

            String file = "/home/parallels/Documents/CS5302-OperatingSystems/InterprocessCommunications/sample_files";

            ReadFilesProcess readFiles = new (file);
            String files = readFiles.GetFiles();

            if(files.Contains("Error:"))
                Console.WriteLine("Error reading files");
            else if (files.Length == 0)
                Console.WriteLine("No files found in the folder");
            // else {
            //     Console.WriteLine(files);
            // } 


            using var server = new NamedPipeServerStream("FilesPipe");
            Console.WriteLine("Waiting for connection...");
            server.WaitForConnection();

            using var reader = new StreamReader(server);
            using StreamWriter writer = new StreamWriter(server) { AutoFlush = true };
            {

                writer.WriteLine(files);
                Console.WriteLine("Files sent to client");    

                 string lineFromClient = reader.ReadLine();
                Console.WriteLine($"Received from client: {lineFromClient}");          
            }

        }
    }
}
